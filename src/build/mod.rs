mod transformer;

use std::{env, fs::File, io::Write, path::Path};

/// This is used as such:
/// in your build.rs;
/// instead of:
///     ```rust
///     tonic_build::configure()
///     // ...
///    ```
/// do this:
///     ```rust
///     rust_cri_kit::build::cri_init();
///     ```
#[inline]
pub fn cri_init(project_name: &str) -> Result<(), Box<dyn std::error::Error>> {
    #[cfg(feature = "v1")]
    let proto_path = format!("{}/v1.proto", env::var("OUT_DIR").unwrap());
    #[cfg(feature = "v1alpha2")]
    let proto_path = format!("{}/v1alpha2.proto", env::var("OUT_DIR").unwrap());

    let mut file = File::create(&proto_path)?;
    #[cfg(feature = "v1")]
    let content = include_str!("../../proto/v1.proto").to_string();
    #[cfg(feature = "v1alpha2")]
    let content = include_str!("../../proto/v1alpha2.proto").to_string();

    file.write_all(content.as_bytes())?;
    tonic_build::configure()
        .build_client(false)
        .build_server(true)
        .compile(
            &[&proto_path],
            &[Path::new(proto_path.as_str()).parent().unwrap()],
        )?;

    // gen src/cri.rs
    let mut file = File::create("src/cri.rs")?;

    #[cfg(feature = "v1")]
    let fname = "/runtime.v1.rs";
    #[cfg(feature = "v1alpha2")]
    let fname = "/runtime.v1alpha2.rs";

    let gen_rs_path = format!("{}{}", env::var("OUT_DIR").unwrap(), fname);
    let content = transformer::transform(gen_rs_path, project_name.to_string())?;

    let stub = format!(
        "\
// AUTO GENERATED BY rust-cri-kit, DO NOT CHANGE YOURSELF \n
{}
",
        content
    );

    let stub = stub.as_bytes();

    file.write_all(stub)?;

    Ok(())
}
